/* Import Montserrat font from google fonts */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');

/* Custom properties */

:root {
    /* Using this in p line-height */
    --leading: 2em;
}

body {
    /* Use Montserrat font, but use sans-serif if the browser cannot download it. */
    font-family: 'Montserrat', sans-serif;
    /* Override default browser margin */
    margin: 0;
}

.hero-bg {
    background: #307099 url("../images/bg.jpg");

    /* Change which part of the background image you can see */
    /* First is horizontal and second is vertical. 0% 0% is top left, 100% 100% is bottom right.
    Specifying only one value means the other value will be 50%. Default value is 0% 0%*/
    background-position: 12% 83%;

    /* Use color to change the colour of text */
    color: white;
    text-align: center;

    /* This padding-bottom allows you to see the picture of the orange*/
    /* You want to use em for padding and design, but rem for text */
    padding-bottom: 4em;
}

header {
    padding: 1em 0;
}

/* Any a elements in hero-bg */
.hero-bg a {
    color: white;
    /* Get rid of underline on link */
    text-decoration: none;
    font-weight: bold;
    /* You want to use em for padding and design, but rem for text */
    font-size: 1.2rem
}

section {
    /* Give some space on left and right */
    margin: 0 1em;
}

h1 {
    font-size: 2.5rem;
    margin: 2em 01.2em;
}
h1 span {
    text-transform: uppercase;
    /* Block = it will be on its own line, nothing will float to the left or right of it */
    display: block;
    font-size: 1.4rem;

    /* You need to set the parent element relative so that the "absolute" can be relative to this element */
    position: relative;
    z-index: 1;
}

/* For light blue underline underneath "The Healthy" */
h1 span::before {
    content: ' ';
    /*You can break out of the traditional box model and do an underline*/
    /* If you don't use 'relative' in the parent, the blue underline will be at the bottom of the browser */
    position: absolute;
    width: 3em;
    background: #00BFFF;
    height: 0.4em;
    bottom: 0;
    z-index: -1;
    margin-left: -0.3em

}

.hero-bg p {
    font-weight: bold;
    margin: 0 1em 3em;
}

.form-container {
    background-color: white;
    /* -1 em for left and right margin allows you to override the 1em margin in hero-bg so that we can stretch to the sides of the screen */
    margin: 2em -1em 0;
    padding: 2em;
}

label {
    color: #2D7D98;
    font-weight: bold;
    /* We don't want anything floating to the left or right */
    display: block;
    margin-bottom: 1em;
    /* Note: default font-size is 1em */
    font-size: 1.2em;
}

/* Affect the type text input */
input[type=text] {
    border: 1px solid #707070;
    /* Width 100% pushes the input element all the way out to the left and right*/
    width: 100%;
    padding: 1em;
    /* Gives a slight corner. Something like 3 em will give a pill shape. */
    border-radius: .5em;
    margin-top: 1.2em;

    /* You need this box-sizing: border-box to prevent this text input element from stretching further right than the find food now button
       This happens because the padding 1em is added to the side of the width 100%.

       You must always add this whenever you are using padding together with width.
    */
    box-sizing: border-box;
}

.form-container p {
    color: gray;
    margin-bottom: 1.5em;
    font-weight: normal;
    font-size: 0.9em;
    margin-top: 0.3em;
}

/* Affect the type button input */
input[type=button] {
    background-color: #f89104;
    border: none;
    width: 100%;
    color: white;
    font-weight: bold;
    padding: 1em 0;
    border-radius: 0.5em;
    font-size: 1.3em;
    /* cursor: pointer Changes cursor to a hand when you hover over the button */
    cursor: pointer;

}

/* Make the button input change to slightly darker when you hover over it */
input[type=button]:hover {
    background-color: rgb(216, 126, 1);
}

/* Resets the 1em set in 'section' to 0 */
.authentic {
    margin: 0;
}

.right-col {
    text-align: center;
    margin: 3em 1em;
}

h2 {
    text-transform: uppercase;
    /* We will add relative so that we can add an underscore later */
    position: relative;
}

/* For light blue underline underneath "The Healthy" */
h2::before {
    content: ' ';
    /*You can break out of the traditional box model and do an underline*/
    /* If you don't use 'relative' in the parent, the blue underline will be at the bottom of the browser */
    position: absolute;
    width: 8em;
    background: #00BFFF;
    height: 0.4em;
    bottom: 0;
    z-index: -1;
    margin-left: -0.3em

}

img {
    /* width 100% makes an image fluid/responsive to size changes */
    width: 100%;
}

p {
    line-height: var(--leading);
}

.overlay {
    /* position: fixed allows us to break out of the box model and overlay everything and also maintain the
    full screen coverage when scrolling down
    NOTE: tutorial showed position: absolute, but scrolling causes problems. */
    position: fixed;

    /* 100 viewport height and 100% width meaning we cover the entire screen*/
    height: 100vh;
    width: 100%;

    /* Black with 0.9 opacity */
    background: rgba(0,0,0,0.9);

    /* Change z-index to 1 (all the way in front) so we can't see other stuff on top of it.
    You need this because the fadeIn animation makes the faded in elements appear on top of this overlay */
    z-index: 1;
    /* Quickly allows us to move the "Searching now" to the center of the screen
    Note that place-content does not work without setting display:grid
    However, in the beginning, we will set display: none and opacity: 0 so that the overlay will only appear when someone clicks
    the orange button */
    place-content: center;
    display: none;
    /* opacity: 0 allows us to fade in later from 0 opacity */
    opacity: 0;

    /* Color white so we can see the text */
    color: white;
}

.animate-overlay {
    /* Create overlay animation and don't loop. We have to define an "overlay" animation below with @keyframes. */
    animation: overlay 3s forwards;
}

/* Use min-width since our design is mobile first */
@media (min-width: 730px) {
    section {
        /* Add margin to left and right (originally no margin at all) when screen gets too big */
        margin: 0 4em;
    }
    .form-container {
        /* Readjust to -4 em instead of -1 em since the section left-right margin is now 4 em.  */
        margin: 2em -4em 0;
    }


}

@media (min-width: 930px) {
    .hero-bg {
        /*Make text align left instead of centre when screen is much bigger*/
        text-align: left;
    }
    /* Gets rid of margin to left and right of h1 so that everything aligns.*/
    .hero-bg h1 {
        margin: 2em 0;
    }

    .hero-bg p {
        /* Change p left-right to 0*/
        margin: 0 0 3em;
    }

    /* Override width of 100% so that the boxes etc dont stretch all the way. They only now stretch 65% of the way. */
    .hero-bg section {
        width: 65%;
    }

    .form-container {
        /* No longer has negative margin*/
        margin: 2em 0 0;
        /* Padding same */
        padding: 2em;
        /* Round the corners */
        border-radius: .5em;
        /* Add shadow. First two values for off to bottom and right. 10px blur. Then black shadow with 0.3 opacity*/
        box-shadow: 10px 10px 10px rgba(0,0,0,0.3);
    }

    form {
        /* Flexbox and grid are two ways to organize your layout.
           For simpler elements, you can use flex. For larger more complex things, use CSS Grid.
        */
        /* Flex automatically floats the elements right and left. */
        display: flex;


    }
    .form-left {
        /* Makes the form take up 70% of the container */
        /* Note that you need to make the button element have a width of 30% for this to work properly. */
        width: 70%;
    }
    label {
        margin: 0;
    }

    input[type="button"]{
        /* Fix the weirdly big height with height: fit-content */
        height: fit-content;
        font-size: 1.1em;
        /* Give it space from the input */
        margin-left: 1em;
        /* Push away from top*/
        margin-top: 2.2em;
        padding: .7em 0;
        width: 30%;
    }

    .hero-bg p {
        /* There was too much margin bottom on the p element */
        margin-bottom: 0;
    }

    /* Use CSS Grid to split up the bottom section*/
    section.authentic {
        display: grid;
        grid-template-columns: repeat(2, 50%);
        /* Without defining the areas, the columns are switched around compared to the mockup */
        grid-template-areas:
                "bowl content";
    }

    .right-col {
        /*Assign to the correct grid template areas*/
        grid-area: content;

        /* % padding allows us to increase padding as we get bigger */
        padding: 0 10%;
        text-align: left;

        /* Vertically aligns to the center. */
        align-self: center;
    }

    img {
        /*Assign to the correct grid template areas*/
        grid-area: bowl;
    }

    h2 {
        margin: 0;
    }


}

.top {
    /* Let it fade in 2 seconds. Forwards means do it once and don't loop.
    We must then define fadeIn using @keyframes*/
    animation: fadeIn 2s forwards;
}

@keyframes fadeIn {
    /* For simple animations, use from and to */
    from {
        /* Start from invisible to visible */
        opacity: 0;

        /* Start from 2 em from the top and then go down to the normal position*/
        transform: translateY(-2em);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes overlay {
    /* Multi step animation. We want this to fade in, stay a while, then fade out
    This plays over 3 seconds.
    */
    /* Over the first 30% of 3 seconds, fade in.*/
    0% {
        opacity: 0;
    }
    30% {
        opacity: 1;
    }
    /* For 30% to 70% of 3 seconds, keep the overlay there. */
    70% {
        opacity: 1;
    }
    /* Between 70% to 100% of 3 seconds, fade out. */
    100% {
        opacity: 0;
    }

}
